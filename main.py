from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLineEdit, QMessageBox
import re
import os
import sqlite3
import AddBook
import UpdateBook
import UpdateUser
import UserHistory


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 523)
        MainWindow.setFixedSize(790, 523)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 791, 511))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_welcome = QtWidgets.QWidget()
        self.page_welcome.setObjectName("page_welcome")
        self.photo_principal = QtWidgets.QLabel(self.page_welcome)
        self.photo_principal.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal.setText("")
        self.photo_principal.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal.setScaledContents(True)
        self.photo_principal.setObjectName("photo_principal")
        self.label_book = QtWidgets.QLabel(self.page_welcome)
        self.label_book.setGeometry(QtCore.QRect(250, 10, 311, 91))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_book.setFont(font)
        self.label_book.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_book.setObjectName("label_book")
        self.label_manage = QtWidgets.QLabel(self.page_welcome)
        self.label_manage.setGeometry(QtCore.QRect(430, 120, 361, 171))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_manage.setFont(font)
        self.label_manage.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_manage.setObjectName("label_manage")
        self.label_welcome = QtWidgets.QLabel(self.page_welcome)
        self.label_welcome.setGeometry(QtCore.QRect(50, 140, 241, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_welcome.setFont(font)
        self.label_welcome.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_welcome.setObjectName("label_welcome")
        self.button_user = QtWidgets.QPushButton(self.page_welcome)
        self.button_user.setGeometry(QtCore.QRect(270, 390, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button_user.setFont(font)
        self.button_user.setStyleSheet("background-color: rgb(255, 189, 227);")
        self.button_user.setObjectName("button_user")
        self.button_admin = QtWidgets.QPushButton(self.page_welcome)
        self.button_admin.setGeometry(QtCore.QRect(270, 290, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.button_admin.setFont(font)
        self.button_admin.setStyleSheet("background-color: rgb(255, 189, 227);")
        self.button_admin.setObjectName("button_admin")
        self.label_or = QtWidgets.QLabel(self.page_welcome)
        self.label_or.setGeometry(QtCore.QRect(300, 350, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_or.setFont(font)
        self.label_or.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_or.setObjectName("label_or")
        self.stackedWidget.addWidget(self.page_welcome)
        self.page_login_admin = QtWidgets.QWidget()
        self.page_login_admin.setObjectName("page_login_admin")
        self.photo_principal2 = QtWidgets.QLabel(self.page_login_admin)
        self.photo_principal2.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal2.setText("")
        self.photo_principal2.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal2.setScaledContents(True)
        self.photo_principal2.setObjectName("photo_principal2")
        self.background = QtWidgets.QLabel(self.page_login_admin)
        self.background.setGeometry(QtCore.QRect(210, 50, 391, 351))
        self.background.setStyleSheet("background-color: rgb(227, 227, 227);")
        self.background.setText("")
        self.background.setObjectName("background")
        self.photo_login = QtWidgets.QLabel(self.page_login_admin)
        self.photo_login.setGeometry(QtCore.QRect(350, 70, 101, 91))
        self.photo_login.setText("")
        self.photo_login.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" +"avatar.png"))
        self.photo_login.setScaledContents(True)
        self.photo_login.setObjectName("photo_login")
        self.label_username_admin = QtWidgets.QLabel(self.page_login_admin)
        self.label_username_admin.setGeometry(QtCore.QRect(290, 180, 111, 31))
        self.label_username_admin.setObjectName("label_username_admin")
        self.entry_username_admin = QtWidgets.QLineEdit(self.page_login_admin)
        self.entry_username_admin.setGeometry(QtCore.QRect(290, 210, 211, 31))
        self.entry_username_admin.setObjectName("entry_username_admin")
        self.label_password_admin = QtWidgets.QLabel(self.page_login_admin)
        self.label_password_admin.setGeometry(QtCore.QRect(290, 240, 121, 41))
        self.label_password_admin.setObjectName("label_password_admin")
        self.entry_password_admin = QtWidgets.QLineEdit(self.page_login_admin)
        self.entry_password_admin.setGeometry(QtCore.QRect(290, 280, 211, 31))
        self.entry_password_admin.setObjectName("entry_password_admin")
        self.entry_password_admin.setEchoMode(QLineEdit.Password)
        self.button_login_admin = QtWidgets.QPushButton(self.page_login_admin)
        self.button_login_admin.setGeometry(QtCore.QRect(350, 330, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.button_login_admin.setFont(font)
        self.button_login_admin.setStyleSheet("background-color: rgb(168, 168, 168);")
        self.button_login_admin.setObjectName("button_login_admin")
        self.button_home = QtWidgets.QPushButton(self.page_login_admin)
        self.button_home.setGeometry(QtCore.QRect(50, 20, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.button_home.setFont(font)
        self.button_home.setObjectName("button_home")
        self.stackedWidget.addWidget(self.page_login_admin)
        self.page_login_user = QtWidgets.QWidget()
        self.page_login_user.setObjectName("page_login_user")
        self.photo_principal2_2 = QtWidgets.QLabel(self.page_login_user)
        self.photo_principal2_2.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal2_2.setText("")
        self.photo_principal2_2.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal2_2.setScaledContents(True)
        self.photo_principal2_2.setObjectName("photo_principal2_2")
        self.background_2 = QtWidgets.QLabel(self.page_login_user)
        self.background_2.setGeometry(QtCore.QRect(10, 50, 371, 411))
        self.background_2.setStyleSheet("background-color: rgb(227, 227, 227);")
        self.background_2.setText("")
        self.background_2.setObjectName("background_2")
        self.background_3 = QtWidgets.QLabel(self.page_login_user)
        self.background_3.setGeometry(QtCore.QRect(410, 50, 371, 411))
        self.background_3.setStyleSheet("background-color: rgb(227, 227, 227);")
        self.background_3.setText("")
        self.background_3.setObjectName("background_3")
        self.photo_login_3 = QtWidgets.QLabel(self.page_login_user)
        self.photo_login_3.setGeometry(QtCore.QRect(140, 70, 101, 91))
        self.photo_login_3.setText("")
        self.photo_login_3.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "avatar.png"))
        self.photo_login_3.setScaledContents(True)
        self.photo_login_3.setObjectName("photo_login_3")
        self.label_username_user = QtWidgets.QLabel(self.page_login_user)
        self.label_username_user.setGeometry(QtCore.QRect(80, 170, 111, 31))
        self.label_username_user.setObjectName("label_username_user")
        self.entry_username_user = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_username_user.setGeometry(QtCore.QRect(80, 210, 211, 31))
        self.entry_username_user.setObjectName("entry_username_user")
        self.entry_password_user = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_password_user.setGeometry(QtCore.QRect(80, 290, 211, 31))
        self.entry_password_user.setObjectName("entry_password_user")
        self.entry_password_user.setEchoMode(QLineEdit.Password)
        self.label_password_user = QtWidgets.QLabel(self.page_login_user)
        self.label_password_user.setGeometry(QtCore.QRect(80, 250, 121, 41))
        self.label_password_user.setObjectName("label_password_user")
        self.button_login_user = QtWidgets.QPushButton(self.page_login_user)
        self.button_login_user.setGeometry(QtCore.QRect(120, 350, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.button_login_user.setFont(font)
        self.button_login_user.setStyleSheet("background-color: rgb(168, 168, 168);")
        self.button_login_user.setObjectName("button_login_user")
        self.label_createaccount = QtWidgets.QLabel(self.page_login_user)
        self.label_createaccount.setGeometry(QtCore.QRect(490, 60, 231, 31))
        self.label_createaccount.setObjectName("label_createaccount")
        self.label_firstname = QtWidgets.QLabel(self.page_login_user)
        self.label_firstname.setGeometry(QtCore.QRect(420, 90, 121, 31))
        self.label_firstname.setObjectName("label_firstname")
        self.label_lastname = QtWidgets.QLabel(self.page_login_user)
        self.label_lastname.setGeometry(QtCore.QRect(420, 130, 111, 31))
        self.label_lastname.setObjectName("label_lastname")
        self.label_address = QtWidgets.QLabel(self.page_login_user)
        self.label_address.setGeometry(QtCore.QRect(420, 170, 131, 31))
        self.label_address.setObjectName("label_address")
        self.label_gender = QtWidgets.QLabel(self.page_login_user)
        self.label_gender.setGeometry(QtCore.QRect(420, 210, 111, 31))
        self.label_gender.setObjectName("label_gender")
        self.label_job = QtWidgets.QLabel(self.page_login_user)
        self.label_job.setGeometry(QtCore.QRect(420, 250, 111, 31))
        self.label_job.setObjectName("label_job")
        self.entry_firstname = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_firstname.setGeometry(QtCore.QRect(550, 90, 211, 31))
        self.entry_firstname.setText("")
        self.entry_firstname.setObjectName("entry_firstname")
        self.entry_lastname = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_lastname.setGeometry(QtCore.QRect(550, 130, 211, 31))
        self.entry_lastname.setObjectName("entry_lastname")
        self.entry_address = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_address.setGeometry(QtCore.QRect(550, 170, 211, 31))
        self.entry_address.setObjectName("entry_address")
        self.comboBox_gender = QtWidgets.QComboBox(self.page_login_user)
        self.comboBox_gender.setGeometry(QtCore.QRect(550, 210, 211, 31))
        self.comboBox_gender.setObjectName("comboBox_gender")
        self.comboBox_gender.addItem("")
        self.comboBox_gender.addItem("")
        self.comboBox_gender.addItem("")
        self.comboBox_job = QtWidgets.QComboBox(self.page_login_user)
        self.comboBox_job.setGeometry(QtCore.QRect(550, 250, 211, 31))
        self.comboBox_job.setObjectName("comboBox_job")
        self.comboBox_job.addItem("")
        self.comboBox_job.addItem("")
        self.comboBox_job.addItem("")
        self.comboBox_job.addItem("")
        self.button_create_user = QtWidgets.QPushButton(self.page_login_user)
        self.button_create_user.setGeometry(QtCore.QRect(510, 410, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.button_create_user.setFont(font)
        self.button_create_user.setStyleSheet("background-color: rgb(168, 168, 168);")
        self.button_create_user.setObjectName("button_create_user")
        self.label_username_new = QtWidgets.QLabel(self.page_login_user)
        self.label_username_new.setGeometry(QtCore.QRect(420, 330, 111, 31))
        self.label_username_new.setObjectName("label_username_new")
        self.entry_username_new = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_username_new.setGeometry(QtCore.QRect(550, 330, 211, 31))
        self.entry_username_new.setObjectName("entry_username_new")
        self.entry_password_new = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_password_new.setGeometry(QtCore.QRect(550, 370, 211, 31))
        self.entry_password_new.setObjectName("entry_password_new")
        self.entry_password_new.setEchoMode(QLineEdit.Password)
        self.label_password_new = QtWidgets.QLabel(self.page_login_user)
        self.label_password_new.setGeometry(QtCore.QRect(420, 370, 111, 31))
        self.label_password_new.setObjectName("label_password_new")
        self.entry_email = QtWidgets.QLineEdit(self.page_login_user)
        self.entry_email.setGeometry(QtCore.QRect(550, 290, 211, 31))
        self.entry_email.setObjectName("entry_email")
        self.label_email = QtWidgets.QLabel(self.page_login_user)
        self.label_email.setGeometry(QtCore.QRect(420, 290, 111, 31))
        self.label_email.setObjectName("label_email")
        self.button_home_2 = QtWidgets.QPushButton(self.page_login_user)
        self.button_home_2.setGeometry(QtCore.QRect(20, 0, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.button_home_2.setFont(font)
        self.button_home_2.setObjectName("button_home_2")
        self.stackedWidget.addWidget(self.page_login_user)
        self.page_admin = QtWidgets.QWidget()
        self.page_admin.setObjectName("page_admin")
        self.photo_principal2_3 = QtWidgets.QLabel(self.page_admin)
        self.photo_principal2_3.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal2_3.setText("")
        self.photo_principal2_3.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal2_3.setScaledContents(True)
        self.photo_principal2_3.setObjectName("photo_principal2_3")
        self.tableWidgetbooks = QtWidgets.QTableWidget(self.page_admin)
        self.tableWidgetbooks.setGeometry(QtCore.QRect(30, 80, 731, 391))
        self.tableWidgetbooks.setObjectName("tableWidgetbooks")
        self.tableWidgetbooks.setColumnCount(6)
        self.tableWidgetbooks.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(207, 207, 207))
        self.tableWidgetbooks.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(209, 209, 209))
        self.tableWidgetbooks.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks.setHorizontalHeaderItem(5, item)
        header = self.tableWidgetbooks.horizontalHeader()       
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Stretch)
        self.button_add = QtWidgets.QPushButton(self.page_admin)
        self.button_add.setGeometry(QtCore.QRect(640, 20, 121, 41))
        self.button_add.setObjectName("button_add")
        self.button_delete = QtWidgets.QPushButton(self.page_admin)
        self.button_delete.setGeometry(QtCore.QRect(360, 20, 121, 41))
        self.button_delete.setObjectName("button_delete")
        self.button_update = QtWidgets.QPushButton(self.page_admin)
        self.button_update.setGeometry(QtCore.QRect(500, 20, 121, 41))
        self.button_update.setObjectName("button_update")
        self.button_logout = QtWidgets.QPushButton(self.page_admin)
        self.button_logout.setGeometry(QtCore.QRect(30, 20, 91, 31))
        self.button_logout.setObjectName("button_logout")
        self.button_viewusers = QtWidgets.QPushButton(self.page_admin)
        self.button_viewusers.setGeometry(QtCore.QRect(220, 20, 121, 41))
        self.button_viewusers.setObjectName("button_viewusers")
        self.button_refreshbooks = QtWidgets.QPushButton(self.page_admin)
        self.button_refreshbooks.setGeometry(QtCore.QRect(30, 60, 71, 21))
        self.button_refreshbooks.setObjectName("button_refreshbooks")
        self.stackedWidget.addWidget(self.page_admin)
        self.page_users = QtWidgets.QWidget()
        self.page_users.setObjectName("page_users")
        self.photo_principal2_4 = QtWidgets.QLabel(self.page_users)
        self.photo_principal2_4.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal2_4.setText("")
        self.photo_principal2_4.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal2_4.setScaledContents(True)
        self.photo_principal2_4.setObjectName("photo_principal2_4")
        self.tableWidgetbooks_2 = QtWidgets.QTableWidget(self.page_users)
        self.tableWidgetbooks_2.setGeometry(QtCore.QRect(10, 70, 771, 401))
        self.tableWidgetbooks_2.setObjectName("tableWidgetbooks_2")
        self.tableWidgetbooks_2.setColumnCount(10)
        self.tableWidgetbooks_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(241, 161, 241))
        self.tableWidgetbooks_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_2.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(241, 161, 241))
        self.tableWidgetbooks_2.setHorizontalHeaderItem(9, item)
        self.button_logout_2 = QtWidgets.QPushButton(self.page_users)
        self.button_logout_2.setGeometry(QtCore.QRect(30, 20, 91, 31))
        self.button_logout_2.setObjectName("button_logout_2")
        self.button_updateuser = QtWidgets.QPushButton(self.page_users)
        self.button_updateuser.setGeometry(QtCore.QRect(640, 10, 121, 41))
        self.button_updateuser.setObjectName("button_updateuser")
        self.button_viewbooks = QtWidgets.QPushButton(self.page_users)
        self.button_viewbooks.setGeometry(QtCore.QRect(490, 10, 121, 41))
        self.button_viewbooks.setObjectName("button_viewbooks")
        self.button_refreshusers = QtWidgets.QPushButton(self.page_users)
        self.button_refreshusers.setGeometry(QtCore.QRect(130, 50, 71, 21))
        self.button_refreshusers.setObjectName("button_refreshusers")
        self.stackedWidget.addWidget(self.page_users)
        self.page_user = QtWidgets.QWidget()
        self.page_user.setObjectName("page_user")
        self.photo_principal2_5 = QtWidgets.QLabel(self.page_user)
        self.photo_principal2_5.setGeometry(QtCore.QRect(0, 0, 791, 501))
        self.photo_principal2_5.setText("")
        self.photo_principal2_5.setPixmap(QtGui.QPixmap(os.path.dirname(os.path.realpath(__file__)) + "/" + "photo_pricipal.jpg"))
        self.photo_principal2_5.setScaledContents(True)
        self.photo_principal2_5.setObjectName("photo_principal2_5")
        self.tableWidgetbooks_3 = QtWidgets.QTableWidget(self.page_user)
        self.tableWidgetbooks_3.setGeometry(QtCore.QRect(30, 70, 731, 391))
        self.tableWidgetbooks_3.setObjectName("tableWidgetbooks_3")
        self.tableWidgetbooks_3.setColumnCount(6)
        self.tableWidgetbooks_3.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(207, 207, 207))
        self.tableWidgetbooks_3.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(209, 209, 209))
        self.tableWidgetbooks_3.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_3.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_3.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_3.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidgetbooks_3.setHorizontalHeaderItem(5, item)
        header = self.tableWidgetbooks_3.horizontalHeader()    
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Stretch)
        self.button_logout_3 = QtWidgets.QPushButton(self.page_user)
        self.button_logout_3.setGeometry(QtCore.QRect(30, 20, 91, 31))
        self.button_logout_3.setObjectName("button_logout_3")
        self.button_borrow = QtWidgets.QPushButton(self.page_user)
        self.button_borrow.setGeometry(QtCore.QRect(640, 10, 121, 41))
        self.button_borrow.setObjectName("button_borrow")
        self.button_history = QtWidgets.QPushButton(self.page_user)
        self.button_history.setGeometry(QtCore.QRect(500, 10, 121, 41))
        self.button_history.setObjectName("button_history")
        self.button_refreshbooks_2 = QtWidgets.QPushButton(self.page_user)
        self.button_refreshbooks_2.setGeometry(QtCore.QRect(100, 50, 71, 21))
        self.button_refreshbooks_2.setObjectName("button_refreshbooks_2")
        self.stackedWidget.addWidget(self.page_user)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.button_admin.clicked.connect(self.admin)
        self.button_user.clicked.connect(self.user)
        self.button_home.clicked.connect(self.home)
        self.button_home_2.clicked.connect(self.home)
        self.button_login_admin.clicked.connect(self.login_admin)
        self.button_add.clicked.connect(self.add_book)
        self.button_update.clicked.connect(self.update_book)
        self.button_viewusers.clicked.connect(self.view_users)
        self.button_viewbooks.clicked.connect(self.login_admin)
        self.button_logout.clicked.connect(self.logout)
        self.button_logout_2.clicked.connect(self.logout)
        self.button_logout_3.clicked.connect(self.logout)
        self.button_updateuser.clicked.connect(self.update_user)
        self.button_history.clicked.connect(self.view_history)
        self.button_login_user.clicked.connect(self.login_user)
        self.button_refreshbooks.clicked.connect(self.refresh_books)
        self.button_refreshbooks_2.clicked.connect(self.refresh_books2)
        self.button_delete.clicked.connect(self.delete_book)
        self.button_create_user.clicked.connect(self.create_account)
        self.button_updateuser.clicked.connect(self.update_user)
        self.button_refreshusers.clicked.connect(self.refresh_users)
        self.button_borrow.clicked.connect(self.borrow_book)

    
    def home(self) :
        self.stackedWidget.setCurrentWidget(self.page_welcome)
    

    def admin(self) :
        self.stackedWidget.setCurrentWidget(self.page_login_admin)
    
    def user(self) :
        self.stackedWidget.setCurrentWidget(self.page_login_user)

    def login_admin(self) :
        username = self.entry_username_admin.text()
        password = self.entry_password_admin.text()

        if username == "" or password == "" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations!")
            msg.setText("Empty field")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            msg.setDefaultButton(QMessageBox.Ok)
            x = msg.exec_()
        
        elif username != "admin" or password != "admin" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations!")
            msg.setText("Incorrect Informations")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        else :
            self.entry_username_admin.setText("")
            self.entry_password_admin.setText("")
            self.refresh_books()
            self.stackedWidget.setCurrentWidget(self.page_admin)
    
    def add_book(self) :    
        self.window = QtWidgets.QDialog()
        self.ui = AddBook.Ui_Addbook()
        self.ui.setupUi(self.window)
        self.window.setModal(True)
        self.window.setWindowTitle("Free Book")
        self.window.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
        self.window.exec()
    
    def update_book(self) :
        self.window = QtWidgets.QDialog()
        self.ui = UpdateBook.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.setModal(True)
        self.window.setWindowTitle("Free Book")
        self.window.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
        self.window.exec()
    

    def view_users(self) :
        self.refresh_users()
        self.stackedWidget.setCurrentWidget(self.page_users)
    
    def logout(self) :
        self.stackedWidget.setCurrentWidget(self.page_welcome)

    def update_user(self) :
        self.window = QtWidgets.QDialog()
        self.ui = UpdateUser.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.setModal(True)
        self.window.setWindowTitle("Free Book")
        self.window.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
        self.window.exec()
    
    def view_books(self) :
        self.stackedWidget.setCurrentWidget(self.page_admin)
    
    def view_history(self) :
        self.window = QtWidgets.QDialog()
        self.ui = UserHistory.Ui_history()
        self.ui.setupUi(self.window, self.username)
        self.window.setModal(True)
        self.window.setWindowTitle("Free Book")
        self.window.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" +"logo.jpg"))
        self.window.exec()

    def refresh_books(self) :
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()
        res = cr.execute("select * from books")

        for row in range(self.tableWidgetbooks.rowCount()) :
            self.tableWidgetbooks.removeRow(0)
        
        index = 0
        for row in res :
            self.tableWidgetbooks.insertRow(index)
            for i in range(len(row)) :
                self.tableWidgetbooks.setItem(index, i, QtWidgets.QTableWidgetItem(str(row[i])))
            index += 1
        
    def refresh_books2(self) :
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()
        res = cr.execute("select * from books")

        for row in range(self.tableWidgetbooks_3.rowCount()) :
            self.tableWidgetbooks_3.removeRow(0)
        
        index = 0
        for row in res :
            self.tableWidgetbooks_3.insertRow(index)
            for i in range(len(row)) :
                self.tableWidgetbooks_3.setItem(index, i, QtWidgets.QTableWidgetItem(str(row[i])))
            index += 1
        
    def refresh_users(self) :
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()
        res = cr.execute("select * from users")

        for row in range(self.tableWidgetbooks_2.rowCount()) :
            self.tableWidgetbooks_2.removeRow(0)
        
        index = 0
        for row in res :
            self.tableWidgetbooks_2.insertRow(index)
            for i in range(len(row)-1) :
                self.tableWidgetbooks_2.setItem(index, i, QtWidgets.QTableWidgetItem(str(row[i])))
            index += 1
        
    def delete_book(self) :
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()

        row = self.tableWidgetbooks.currentRow()
        
        if self.tableWidgetbooks.selectionModel().hasSelection() :
            row = self.tableWidgetbooks.currentRow()
            cr.execute(f"delete from books where isbn = '{self.tableWidgetbooks.item(row, 5).text()}'")
            db.commit()
            msg = QMessageBox()
            msg.setWindowTitle("Informations")
            msg.setText("Book succesfully deleted!")
            msg.setIcon(QMessageBox.Information)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()

        else :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("You did not selected any book!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
    def create_account(self) :
        fname = self.entry_firstname.text()
        lname = self.entry_lastname.text()
        address = self.entry_address.text()
        gender = self.comboBox_gender.currentText()
        job = self.comboBox_job.currentText()
        email = self.entry_email.text()
        username = self.entry_username_new.text()
        password = self.entry_password_new.text()
        
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()

        if fname == "" or lname == "" or address == "" or email == "" or username == "" or password == "" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Empty field!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        elif gender == "Choose gender" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("You didn't choose your gender!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        elif job == "Choose job" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("You didn't choose your job!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        elif email not in re.findall(r"^[a-zA-Z0-9\.]+@[a-zA-Z0-9\.]+\.[a-zA-Z]{2,5}$", email)[0] :
            print(re.findall(r"^[a-zA-Z0-9\.]+@[a-zA-Z0-9\.]+\.[a-zA-Z]{2,5}$", email))
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Enter a valid email!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        elif cr.execute(f"select username from users where username = '{username}'").fetchall() :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Username already exists!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        elif len(password) < 8 :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Password length must be 8 or more!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
        else :
            s = ""
            n = 0
            cr.execute(f"insert into users (fname, lname, username, email, address, gender, job, nb_borrow, actually, history, password) values('{fname}', '{lname}', '{username}', '{email}', '{address}', '{gender[0]}', '{job}', {n}, '{s}', '{s}', '{password}')")
            db.commit()

            msg = QMessageBox()
            msg.setWindowTitle("Informations")
            msg.setText("Account succesfully created!\nYou can now connect")
            msg.setIcon(QMessageBox.Information)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()

            self.entry_firstname.setText("")
            self.entry_lastname.setText("")
            self.entry_address.setText("")
            self.entry_email.setText("")
            self.entry_username_new.setText("")
            self.entry_password_new.setText("")
        
    def login_user(self) :
        self.username = self.entry_username_user.text()
        self.password = self.entry_password_user.text()

        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()
        res = cr.execute(f"select username from users where username = '{self.username}'").fetchall()

        if self.username == "" or self.password == "" :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Empty field!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()

        elif res :
            res = cr.execute(f"select password from users where username = '{self.username}'").fetchall()
            if self.password == res[0][0] :
                self.refresh_books2()
                self.stackedWidget.setCurrentWidget(self.page_user)
                self.entry_username_user.setText("")
                self.entry_password_user.setText("")
            
            else :
                msg = QMessageBox()
                msg.setWindowTitle("Incorrect informations")
                msg.setText("Username or password incorrect!")
                msg.setIcon(QMessageBox.Critical)
                msg.setDefaultButton(QMessageBox.Ok)
                msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
                x = msg.exec_()
        
        else :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("Username or password incorrect!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()
        
    def update_user(self) :
        self.window = QtWidgets.QDialog()
        self.ui = UpdateUser.Ui_Dialog()
        self.ui.setupUi(self.window)
        self.window.setModal(True)
        self.window.setWindowTitle("Free Book")
        self.window.setWindowIcon(QtGui.QIcon("logo.jpg"))
        self.window.exec()

    def borrow_book(self) :
        db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
        cr = db.cursor()

        row = self.tableWidgetbooks_3.currentRow()
        
        if self.tableWidgetbooks_3.selectionModel().hasSelection() :
            row = self.tableWidgetbooks_3.currentRow()
            sauv = cr.execute(f"select title, quantity, nb_borrow from books where isbn = '{self.tableWidgetbooks_3.item(row, 5).text()}'").fetchall()[0]
            title = sauv[0]
            quantity = int(sauv[1])
            nb_borrow =  int(sauv[2])
            res = cr.execute(f"select nb_borrow, actually, history from users where username = '{self.username}'").fetchall()
            if title in res[0][1].split("-") :
                msg = QMessageBox()
                msg.setWindowTitle("Incorrect informations")
                msg.setText("You already have this book!")
                msg.setIcon(QMessageBox.Critical)
                msg.setDefaultButton(QMessageBox.Ok)
                msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
                x = msg.exec_()
            
            elif quantity == 0 :
                msg = QMessageBox()
                msg.setWindowTitle("Incorrect informations")
                msg.setText("All copies of this book already borrowed!")
                msg.setIcon(QMessageBox.Critical)
                msg.setDefaultButton(QMessageBox.Ok)
                msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
                x = msg.exec_()
        
            elif int(res[0][0]) < 3 :
                temp = res[0][1] + title + "-"
                temp2 = res[0][2] + title + "-"
                cr.execute(f"update users set nb_borrow = '{int(res[0][0]) + 1}', actually = '{temp}', history = '{temp2}' where username = '{self.username}'")
                cr.execute(f"update books set quantity = '{quantity - 1}', nb_borrow = '{nb_borrow + 1}' where isbn = '{self.tableWidgetbooks_3.item(row, 5).text()}'")
                db.commit()
                msg = QMessageBox()
                msg.setWindowTitle("Informations")
                msg.setText("Book succesfully borrowed!")
                msg.setIcon(QMessageBox.Information)
                msg.setDefaultButton(QMessageBox.Ok)
                msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
                x = msg.exec_()
            
            else :
                msg = QMessageBox()
                msg.setWindowTitle("Incorrect informations")
                msg.setText("You cannot borrow more than 3 books!")
                msg.setIcon(QMessageBox.Critical)
                msg.setDefaultButton(QMessageBox.Ok)
                msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
                x = msg.exec_()

        else :
            msg = QMessageBox()
            msg.setWindowTitle("Incorrect informations")
            msg.setText("You did not selected any book!")
            msg.setIcon(QMessageBox.Critical)
            msg.setDefaultButton(QMessageBox.Ok)
            msg.setWindowIcon(QtGui.QIcon(os.path.dirname(os.path.realpath(__file__)) + "/" + "logo.jpg"))
            x = msg.exec_()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_book.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; color:#a21332;\">Free Book</span></p></body></html>"))
        self.label_manage.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:28pt;\">Library Managment</span></p><p align=\"center\"><span style=\" font-size:28pt;\">System</span></p></body></html>"))
        self.label_welcome.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#000000;\">Welcome...</span></p></body></html>"))
        self.button_user.setText(_translate("MainWindow", "User"))
        self.button_admin.setText(_translate("MainWindow", "Admin"))
        self.label_or.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">or</span></p></body></html>"))
        self.label_username_admin.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Username :</span></p></body></html>"))
        self.label_password_admin.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Password : </span></p></body></html>"))
        self.button_login_admin.setText(_translate("MainWindow", "Login"))
        self.button_home.setText(_translate("MainWindow", "Home"))
        self.label_username_user.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Username :</span></p></body></html>"))
        self.label_password_user.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Password : </span></p></body></html>"))
        self.button_login_user.setText(_translate("MainWindow", "Login"))
        self.label_createaccount.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">Create new account</span></p></body></html>"))
        self.label_firstname.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">First Name :</span></p></body></html>"))
        self.label_lastname.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Last Name :</span></p></body></html>"))
        self.label_address.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Address :</span></p></body></html>"))
        self.label_gender.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Gender :</span></p></body></html>"))
        self.label_job.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Job :</span></p></body></html>"))
        self.comboBox_gender.setItemText(0, _translate("MainWindow", "Choose gender"))
        self.comboBox_gender.setItemText(1, _translate("MainWindow", "Male"))
        self.comboBox_gender.setItemText(2, _translate("MainWindow", "Female"))
        self.comboBox_job.setItemText(0, _translate("MainWindow", "Choose job"))
        self.comboBox_job.setItemText(1, _translate("MainWindow", "Student"))
        self.comboBox_job.setItemText(2, _translate("MainWindow", "Employee"))
        self.comboBox_job.setItemText(3, _translate("MainWindow", "Unemployed"))
        self.button_create_user.setText(_translate("MainWindow", "Create now"))
        self.label_username_new.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username :</span></p></body></html>"))
        self.label_password_new.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Password :</span></p></body></html>"))
        self.label_email.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Email :</span></p></body></html>"))
        self.button_home_2.setText(_translate("MainWindow", "Home"))
        item = self.tableWidgetbooks.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        item = self.tableWidgetbooks.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Author"))
        item = self.tableWidgetbooks.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidgetbooks.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Quantity"))
        item = self.tableWidgetbooks.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Borrowed times"))
        item = self.tableWidgetbooks.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "ISBN"))
        self.button_add.setText(_translate("MainWindow", "Add book"))
        self.button_delete.setText(_translate("MainWindow", "Delete book"))
        self.button_update.setText(_translate("MainWindow", "Update infos"))
        self.button_logout.setText(_translate("MainWindow", "Log out"))
        self.button_viewusers.setText(_translate("MainWindow", "View users"))
        self.button_refreshbooks.setText(_translate("MainWindow", "Refresh"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "First name"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Last name"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Username"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Email"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Address"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Gender"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Job"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "nb_borrow"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "actually"))
        item = self.tableWidgetbooks_2.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "history"))
        self.button_logout_2.setText(_translate("MainWindow", "Log out"))
        self.button_updateuser.setText(_translate("MainWindow", "Update infos"))
        self.button_viewbooks.setText(_translate("MainWindow", "View books"))
        self.button_refreshusers.setText(_translate("MainWindow", "Refresh"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Author"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Quantity"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Borrowed times"))
        item = self.tableWidgetbooks_3.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "ISBN"))
        self.button_logout_3.setText(_translate("MainWindow", "Log out"))
        self.button_borrow.setText(_translate("MainWindow", "Borrow book"))
        self.button_history.setText(_translate("MainWindow", "View my history"))
        self.button_refreshbooks_2.setText(_translate("MainWindow", "Refresh"))


if __name__ == "__main__":
    import sys

    db = sqlite3.connect(os.path.dirname(os.path.realpath(__file__)) +"\database.db")
    cr = db.cursor()
    cr.execute("create table if not exists books(title text, author text, category text, quantity integer, nb_borrow integer, isbn integer)")
    cr.execute("create table if not exists users(fname text, lname text, username text, email text, address text, gender text, job text, nb_borrow integer, actually text, history text, password integer)")
    db.commit()

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Library Managment System By Elyes")
    MainWindow.setWindowIcon(QtGui.QIcon("logo.jpg"))
    MainWindow.show()
    sys.exit(app.exec_())
